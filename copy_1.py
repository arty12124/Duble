import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import re

class DuplicateRemover:
    def __init__(self, root):
        self.root = root
        self.root.title("üîß –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å—Ç—Ä–æ–∫")
        self.root.geometry("900x700")
        self.root.minsize(800, 600)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
        self.setup_styles()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        main_container = ttk.Frame(root)
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(main_container)
        title_frame.pack(fill=tk.X, pady=(0, 20))
        
        title_label = ttk.Label(title_frame, text="–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ç—Ä–æ–∫", 
                               font=('Segoe UI', 16, 'bold'))
        title_label.pack(side=tk.LEFT)
        
        # –°—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–æ–∫
        self.stats_label = ttk.Label(title_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", 
                                   font=('Segoe UI', 10))
        self.stats_label.pack(side=tk.RIGHT)
        
        # –§—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥–∞
        input_frame = ttk.LabelFrame(main_container, text="üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç", padding=15)
        input_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–ª–µ–º
        input_buttons_frame = ttk.Frame(input_frame)
        input_buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.paste_button = ttk.Button(input_buttons_frame, text="üìã –í—Å—Ç–∞–≤–∏—Ç—å", 
                                     command=self.paste_text, style="Action.TButton")
        self.paste_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.clear_input_button = ttk.Button(input_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", 
                                           command=self.clear_input)
        self.clear_input_button.pack(side=tk.LEFT)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        self.input_text = scrolledtext.ScrolledText(
            input_frame, 
            height=8, 
            font=('Consolas', 10),
            wrap=tk.WORD,
            relief=tk.FLAT,
            borderwidth=1
        )
        self.input_text.pack(fill=tk.BOTH, expand=True)
        self.input_text.bind('<KeyRelease>', self.update_input_stats)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_frame = ttk.Frame(main_container)
        process_frame.pack(fill=tk.X, pady=10)
        
        self.process_button = ttk.Button(
            process_frame, 
            text="‚ö° –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç", 
            command=self.remove_duplicates,
            style="Process.TButton"
        )
        self.process_button.pack(side=tk.LEFT, expand=True, fill=tk.X, padx=(0, 10))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = ttk.Progressbar(process_frame, mode='indeterminate', length=100)
        self.progress.pack(side=tk.RIGHT)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        output_frame = ttk.LabelFrame(main_container, text="‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç", padding=15)
        output_frame.pack(fill=tk.BOTH, expand=True, pady=(15, 0))
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        output_buttons_frame = ttk.Frame(output_frame)
        output_buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.copy_button = ttk.Button(output_buttons_frame, text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", 
                                    command=self.copy_result, style="Action.TButton")
        self.copy_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.save_button = ttk.Button(output_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                                    command=self.save_result)
        self.save_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.clear_output_button = ttk.Button(output_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", 
                                            command=self.clear_output)
        self.clear_output_button.pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_stats_label = ttk.Label(output_buttons_frame, text="", 
                                          font=('Segoe UI', 9, 'italic'))
        self.result_stats_label.pack(side=tk.RIGHT)
        
        # –ü–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.output_text = scrolledtext.ScrolledText(
            output_frame, 
            height=8, 
            font=('Consolas', 10),
            wrap=tk.WORD,
            relief=tk.FLAT,
            borderwidth=1,
            bg='#f8f9fa'
        )
        self.output_text.pack(fill=tk.BOTH, expand=True)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = ttk.Label(main_container, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", 
                                  relief=tk.SUNKEN, anchor=tk.W, 
                                  font=('Segoe UI', 9))
        self.status_bar.pack(fill=tk.X, pady=(10, 0), ipady=5)
        
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.setup_hotkeys()
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.update_button_states()
    
    def setup_styles(self):
        style = ttk.Style()
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        style.configure("Process.TButton", 
                       font=('Segoe UI', 11, 'bold'))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        style.configure("Action.TButton", 
                       font=('Segoe UI', 10))
    
    def setup_hotkeys(self):
        self.root.bind('<Control-v>', lambda e: self.paste_text())
        self.root.bind('<Control-Return>', lambda e: self.remove_duplicates())
        self.root.bind('<Control-c>', lambda e: self.copy_result())
        self.root.bind('<F5>', lambda e: self.remove_duplicates())
    
    def paste_text(self):
        try:
            clipboard_content = self.root.clipboard_get()
            self.input_text.delete("1.0", tk.END)
            self.input_text.insert("1.0", clipboard_content)
            self.update_input_stats()
            self.status_bar.config(text="–¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
        except tk.TclError:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
    
    def clear_input(self):
        self.input_text.delete("1.0", tk.END)
        self.update_input_stats()
        self.status_bar.config(text="–ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ—á–∏—â–µ–Ω–æ")
    
    def clear_output(self):
        self.output_text.delete("1.0", tk.END)
        self.result_stats_label.config(text="")
        self.status_bar.config(text="–ü–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—á–∏—â–µ–Ω–æ")
        self.update_button_states()
    
    def update_input_stats(self, event=None):
        content = self.input_text.get("1.0", tk.END).strip()
        if content:
            lines = [line.strip() for line in content.split('\n') if line.strip()]
            self.stats_label.config(text=f"–°—Ç—Ä–æ–∫: {len(lines)}")
        else:
            self.stats_label.config(text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.update_button_states()
    
    def update_button_states(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        has_input = bool(self.input_text.get("1.0", tk.END).strip())
        has_output = bool(self.output_text.get("1.0", tk.END).strip())
        
        # –£–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
        self.process_button.config(state=tk.NORMAL if has_input else tk.DISABLED)
        self.copy_button.config(state=tk.NORMAL if has_output else tk.DISABLED)
        self.save_button.config(state=tk.NORMAL if has_output else tk.DISABLED)
    
    def show_progress(self, show=True):
        if show:
            self.progress.start(10)
            self.process_button.config(state=tk.DISABLED)
        else:
            self.progress.stop()
            self.update_button_states()
    
    def remove_duplicates(self):
        input_content = self.input_text.get("1.0", tk.END).strip()
        
        if not input_content:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.show_progress(True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.root.after(100, self._process_text, input_content)
    
    def _process_text(self, input_content):
        try:
            lines = input_content.split('\n')
            original_count = len([line for line in lines if line.strip()])
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
            seen = set()
            unique_lines = []
            duplicates_count = 0
            
            for line in lines:
                line = line.strip()
                if line:
                    if line in seen:
                        duplicates_count += 1
                    else:
                        seen.add(line)
                        unique_lines.append(line)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_result = []
            processed_count = 0
            
            for line in unique_lines:
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: –Ω–∏–∫–Ω–µ–π–º + –ø—Ä–æ–±–µ–ª—ã + —á–∏—Å–ª–∞
                match = re.match(r'^(.+?)\s+(\d+)$', line)
                if match:
                    nickname = match.group(1).strip()
                    user_id = match.group(2)
                    formatted_result.append(f"{nickname} - {user_id}")
                    processed_count += 1
                else:
                    formatted_result.append(line)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = '\n'.join(formatted_result)
            self.output_text.delete("1.0", tk.END)
            self.output_text.insert("1.0", result)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            unique_count = len(unique_lines)
            self.result_stats_label.config(
                text=f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {unique_count} | –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}"
            )
            
            # –°—Ç–∞—Ç—É—Å
            if duplicates_count > 0:
                self.status_bar.config(text=f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ! –£–¥–∞–ª–µ–Ω–æ {duplicates_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ {original_count} —Å—Ç—Ä–æ–∫")
            else:
                self.status_bar.config(text=f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ! –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ({original_count} —Å—Ç—Ä–æ–∫)")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            self.status_bar.config(text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        finally:
            self.show_progress(False)
    
    def copy_result(self):
        result = self.output_text.get("1.0", tk.END).strip()
        if result:
            self.root.clipboard_clear()
            self.root.clipboard_append(result)
            
            # –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
            original_text = self.copy_button.cget("text")
            self.copy_button.config(text="‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!")
            self.status_bar.config(text="üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            self.root.after(2000, lambda: self.copy_button.config(text=original_text))
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def save_result(self):
        result = self.output_text.get("1.0", tk.END).strip()
        if not result:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        from tkinter import filedialog
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(result)
                self.status_bar.config(text=f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª:\n{filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")

def main():
    root = tk.Tk()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        root.iconbitmap(default="app.ico")
    except:
        pass
    
    app = DuplicateRemover(root)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
    root.update_idletasks()
    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)
    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)
    root.geometry(f"+{x}+{y}")
    
    root.mainloop()

if __name__ == "__main__":
    main()